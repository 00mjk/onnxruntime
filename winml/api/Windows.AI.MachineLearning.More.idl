// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//! \file Windows.AI.MachineLearning.idl
import "Windows.AI.MachineLearning.idl";
import "Windows.Foundation.idl";
import "windows.graphics.idl";
import "windows.media.idl";

#ifndef WINDOWSAI_RAZZLE_BUILD
// Pull in definition for DualApiPartitionAttribute, because the WinML IDL
// does not build in the OS Repo, and needs to access internal definitions for
// various custom attirbute definitions.
import "dualapipartitionattribute.idl";
import "windows.graphics.directx.direct3d11.idl";
import "windows.graphics.imaging.idl";
import "windows.storage.idl";
#endif

#include <sdkddkver.h>

namespace Windows.AI.MachineLearning.More {

  [threading(both)]
  [marshaling_behavior(agile)]
  [dualapipartition(1)]
  runtimeclass LearningModelOperatorResolutionPolicy {
    LearningModelOperatorResolutionPolicy();

    LearningModelOperatorResolutionPolicy ConnectInputs();
    LearningModelOperatorResolutionPolicy ConnectConstants();
    LearningModelOperatorResolutionPolicy AddInputMapping(String operator_input, String incoming_input);
    LearningModelOperatorResolutionPolicy GenerateMissingInputsAsModelConstants();
    LearningModelOperatorResolutionPolicy GenerateMissingInputsAsModelInputs();
  }

  runtimeclass LearningModelBuilder;


  [threading(both)]
  [marshaling_behavior(agile)]
  [dualapipartition(1)]
  runtimeclass LearningModelOperator {
    LearningModelOperator(String type, String name);

    LearningModelOperator Then(LearningModelOperator next_operator);
    LearningModelOperator Then(LearningModelOperator next_operator, LearningModelOperatorResolutionPolicy policy);
    LearningModelBuilder ConnectToOutputs();
    LearningModelBuilder ConnectToOutputs(LearningModelOperatorResolutionPolicy policy);

    LearningModelOperator SetAttribute(String name, IInspectable value);
    Windows.Foundation.Collections.IVectorView<Windows.AI.MachineLearning.ILearningModelFeatureDescriptor> Inputs { get; };
    Windows.Foundation.Collections.IMapView<String, String> InputMapping { get; };
    Windows.Foundation.Collections.IVectorView<Windows.AI.MachineLearning.ILearningModelFeatureDescriptor> Attributes { get; };
    Windows.Foundation.Collections.IVectorView<Windows.AI.MachineLearning.ILearningModelFeatureDescriptor> Outputs { get; };
    String Name { get; };

    static LearningModelOperator Gemm();
    static LearningModelOperator Gemm(String name);
  }

  [marshaling_behavior(agile)]
  [dualapipartition(1)]
  runtimeclass LearningModelInputs {
    LearningModelOperator Then(LearningModelOperator next_operator);
    LearningModelOperator Then(LearningModelOperator next_operator, LearningModelOperatorResolutionPolicy policy);
    LearningModelBuilder Add(Windows.AI.MachineLearning.ILearningModelFeatureDescriptor input);
    LearningModelBuilder Add(Windows.AI.MachineLearning.ILearningModelFeatureDescriptor input, IInspectable default_value);
    LearningModelBuilder AddConstant(Windows.AI.MachineLearning.ILearningModelFeatureDescriptor input, IInspectable value);
  }

  [marshaling_behavior(agile)]
  [dualapipartition(1)]
  runtimeclass LearningModelOutputs {
    LearningModelBuilder Add(Windows.AI.MachineLearning.ILearningModelFeatureDescriptor output);
  }

  //! \interface LearningModelBuilder
  //! \brief Represents a trained machine learning model.
  //! \details This is the main object you use to interact with Windows Machine Learning.  You use
  //! it to load, bind, and evaluate trained ONNX models.   To load the model you use
  //! one of the Load constructors.  You can then enumerate the InputFeatures and
  //! OutputFeatures.   To bind and evaluate you create a LearningModelSession.
  [threading(both)]
  [marshaling_behavior(agile)]
  [dualapipartition(1)]
  runtimeclass LearningModelBuilder {
    LearningModelInputs Inputs { get; };
    LearningModelOutputs Outputs { get; };

    //! Create a builder.
    static LearningModelBuilder Create();

    static LearningModelOperator AfterAll(
        LearningModelOperator target,
        Windows.Foundation.Collections.IVectorView<LearningModelOperator> input_operators);

    static LearningModelOperator AfterAll(
        LearningModelOperator target,
        Windows.Foundation.Collections.IVectorView<LearningModelOperator> input_operators,
        LearningModelOperatorResolutionPolicy policy);

    Windows.AI.MachineLearning.LearningModel CreateModel();
  }
}  // namespace Windows.AI.MachineLearning.More
/*
 * Copyright Â© 2019, Oracle and/or its affiliates. All rights reserved.
 * Licensed under the MIT License.
 */
import org.gradle.internal.jvm.Jvm
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'cpp-library'
    id 'java'
    id 'maven'
    id 'maven-publish'
}

group 'ai.onnxruntime'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def os = DefaultNativePlatform.currentOperatingSystem
def platform = 'unknown'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
  	testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
}

compileJava {
    options.headerOutputDirectory = file("src/main/native")
}

library {
    baseName = "onnxruntime4j_jni"
    targetMachines = [
            machines.linux,
            machines.macOS
    ]
    binaries.configureEach {
        def compileTask = compileTask.get()
        compileTask.dependsOn "compileJava"
        compileTask.source.from fileTree(dir: "src/main/native", include: "**/*.c")
        List<String> newCompilerArgs = new ArrayList<String>()
        newCompilerArgs.add("-x")
        newCompilerArgs.add("c")
        newCompilerArgs.add("-std=c11")
        if (targetMachine.operatingSystemFamily.macOs) {
            newCompilerArgs.add("-I")
            newCompilerArgs.add("${Jvm.current().javaHome}/include")
            newCompilerArgs.add("-I")
            newCompilerArgs.add("${Jvm.current().javaHome}/include/darwin")
        } else if (targetMachine.operatingSystemFamily.linux) {
            newCompilerArgs.add("-I")
            newCompilerArgs.add("${Jvm.current().javaHome}/include")
            newCompilerArgs.add("-I")
            newCompilerArgs.add("${Jvm.current().javaHome}/include/linux")
            newCompilerArgs.add("-D_FILE_OFFSET_BITS=64")
        }
        newCompilerArgs.add("-I")
        newCompilerArgs.add("${project.rootDir}/../include/")
        newCompilerArgs.add("-I")
        newCompilerArgs.add("${project.rootDir}/../include/onnxruntime/")
        newCompilerArgs.add("-I")
        newCompilerArgs.add("${project.rootDir}/../include/onnxruntime/core/session/")
        newCompilerArgs.add("-Werror")
        compileTask.compilerArgs = newCompilerArgs

        def linkTask = linkTask.get()
        if (toolChain instanceof GccCompatibleToolChain) {
            linkTask.linkerArgs = ["-nodefaultlibs", "-L../build/Linux/Debug/", "-lc", "-lonnxruntime"]
        }
    }
}

jar {
    manifest {
        attributes (
          'Main-Class': "com.microsoft.onnxruntime.Main",
          'Implementation-Title': project.name,
          'Implementation-Version': project.version,
          'Built-JDK': System.getProperty('java.version'),
          'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
    into("/lib/") {
        from { "build/lib/main/release/" + platform + "/" }
        from { "../build/Linux/Debug/libonnxruntime.so" }
        from { "../build/Linux/Debug/libonnxruntime.dylib" }
    }
}

task('debugJar', type: Jar) {
    dependsOn ":compileJava"
    manifest {
        attributes (
                'Main-Class': "com.microsoft.onnxruntime.Main",
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-JDK': System.getProperty('java.version'),
                'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
    classifier = 'debug'
    into("/") {
        from { "build/classes/java/main/" }
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
    into("/lib/") {
        from { "build/lib/main/debug/" + platform + "/" }
        from { "../build/Linux/Debug/libonnxruntime.so" }
        from { "../build/Linux/Debug/libonnxruntime.dylib" }
    }
}

if (os.isLinux()) {
    jar.dependsOn ":linkReleaseLinux"
    debugJar.dependsOn ":linkDebugLinux"
    platform = "linux"
} else if (os.isMacOsX()) {
    jar.dependsOn ":linkReleaseMacos"
    debugJar.dependsOn ":linkDebugMacos"
    platform = "macos"
}

test {
    classpath = project.sourceSets.test.runtimeClasspath + files("build/lib/main/debug/" + platform + "/") + files("../build/Linux/Debug/")
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events "passed","skipped","failed"
    }
}

publishing {
    publications {
      maven(MavenPublication) {
        groupId project.group
        artifactId project.name
        version project.version

        from components.java
      }
    }
}

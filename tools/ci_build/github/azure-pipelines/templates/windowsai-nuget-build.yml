parameters:
  BuildArch: 'x64'
  BuildCommand: ''
  EnvironmentSetupBat: 'x64'
  ScriptArchitecture: 'x64'

steps:

  - template: enable-telemetry.yml

  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: ${{ parameters.ScriptArchitecture }}

  - task: BatchScript@1
    displayName: 'Setup Environment'
    inputs:
      filename: ${{ parameters.EnvironmentSetupBat }}
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - task: PythonScript@0
    displayName: 'Generate CMake Configuration'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: ${{ parameters.BuildCommand }}
      workingDirectory: '$(Build.BinariesDirectory)'

  - ${{ if notIn(parameters['sln_platform'], 'Win32', 'x64') }}:
    # Use cross-compiled protoc
    - script: |
       @echo ##vso[task.setvariable variable=ProtocDirectory]$(Build.BinariesDirectory)\host_protoc\Release

  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
      ${{ if ne(parameters.BuildArch, 'x86') }}:
        platform: ${{ parameters.BuildArch }}
      ${{ if eq(parameters.BuildArch, 'x86') }}:
        platform: 'Win32'
      configuration: RelWithDebInfo
      msbuildArchitecture: ${{ parameters.BuildArch }}
      maximumCpuCount: true
      logProjectEvents: true
      workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
      createLogFile: true

  - script: |
      mklink  /D /J $(Build.BinariesDirectory)\RelWithDebInfo\models $(Build.BinariesDirectory)\models
      DIR dist\ /S /B > wheel_filename_file
      set /p WHEEL_FILENAME=<wheel_filename_file
      del wheel_filename_file
      python.exe -m pip install -q --upgrade %WHEEL_FILENAME%
      set PATH=%PATH%;$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo
      @echo %PATH%
      python $(Build.SourcesDirectory)\tools\ci_build\build.py $(BuildCommand) --test --config RelWithDebInfo --enable_lto
    workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
    displayName: 'Run tests'

  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**\*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: succeededOrFailed()

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 4.9
    inputs:
      versionSpec: 4.9.4

  - task: BatchScript@1
    displayName: 'Setup VS2019 env vars'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
      arguments: ${{ parameters.ScriptArchitecture }}
      modifyEnvironment: true

  # Esrp signing
  - template: esrp_dll.yml
    parameters:
      FolderPath: '$(Build.BinariesDirectory)\RelWithDebInfo'
      DisplayName: 'ESRP - Sign Native dlls'
      DoEsrp: 'true'


  - ${{ if eq(parameters.BuildArch, 'x64') }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory)
       copy $(Build.SourcesDirectory)\csharp\src\Microsoft.AI.MachineLearning\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if eq(parameters.BuildArch, 'x86') }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=x86
       copy $(Build.SourcesDirectory)\csharp\src\Microsoft.AI.MachineLearning\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if eq(parameters.BuildArch, 'arm64') }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=arm64 /p:ProtocDirectory=$(Build.BinariesDirectory)\host_protoc\Release
       copy $(Build.SourcesDirectory)\csharp\src\Microsoft.AI.MachineLearning\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if eq(parameters.BuildArch, 'arm') }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=arm /p:ProtocDirectory=$(Build.BinariesDirectory)\host_protoc\Release
       copy $(Build.SourcesDirectory)\csharp\src\Microsoft.AI.MachineLearning\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline Artifact: Microsoft.AI.MachineLearning ${{ parameters.BuildArch }}'
    inputs:
      artifactName: 'Microsoft.AI.MachineLearning.${{ parameters.BuildArch }}'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: PublishSymbols@2
    displayName: 'Publish Build Symbols'
    condition: eq(variables['IsReleaseBuild'], 'true')
    inputs:
      symbolsFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
      searchPattern: '**/*.pdb'
      symbolServerType: teamServices

  # Compliance tasks require logs from Debug Build
  - ${{ if eq(parameters['DoCompliance'], 'true') }}:
    - template: compliance.yml

  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - template: clean-agent-build-directory-step.yml
